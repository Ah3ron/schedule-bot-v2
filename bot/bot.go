package bot

import (
	"fmt"
	"log"

	"schedule-bot/models"

	"gopkg.in/telebot.v3"
	"gorm.io/gorm"
)

func StartBot(token string, db *gorm.DB) {
	pref := telebot.Settings{
		Token:  token,
		Poller: &telebot.LongPoller{Timeout: 10},
	}

	b, err := telebot.NewBot(pref)
	if err != nil {
		log.Fatal(err)
	}

	// Handler for the /start command.
	b.Handle("/start", func(c telebot.Context) error {
		return c.Send("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /schedule <–≥—Ä—É–ø–ø–∞> –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.")
	})

	// Handler for the /schedule command with safety checks for arguments.
	b.Handle("/schedule", func(c telebot.Context) error {
		args := c.Args()
		// Check if any argument is provided.
		if len(args) == 0 {
			return c.Send("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≥—Ä—É–ø–ø—É. –ü—Ä–∏–º–µ—Ä: /schedule –≥—Ä—É–ø–ø–∞1")
		}

		group := args[0]
		var schedules []models.Schedule

		if err := db.Where(&models.Schedule{Group: group}).Find(&schedules).Error; err != nil {
			return c.Send("–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.")
		}

		if len(schedules) == 0 {
			return c.Send("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
		}

		response := fmt.Sprintf("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã %s:\n", group)
		for _, schedule := range schedules {
			response += fmt.Sprintf("üìÜ –î–∞—Ç–∞: %s\n‚è∞ –í—Ä–µ–º—è: %s\nüìö –ü—Ä–µ–¥–º–µ—Ç: %s\nüë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: %s\nüè´ –ê—É–¥–∏—Ç–æ—Ä–∏—è: %s\nüî¢ –ü–æ–¥–≥—Ä—É–ø–ø–∞: %s\n\n",
				schedule.Date, schedule.Time, schedule.Subject, schedule.Teacher, schedule.Room, schedule.Subgroup)
		}
		return c.Send(response)
	})

	b.Start()
}
